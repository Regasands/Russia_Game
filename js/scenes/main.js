import {
    HEIGHT,
    WIDTH,
    BUTTONSIZE,
    buttons_game,
    character_passive,
    passive_income,
    wait_enimation,
    character,
    upgrades,
    DAY_NIGHT_CYCLE,
    heroes_info,
    character_open_hero
} from "../constants.js";

//  –≠–∫—Å–ø–æ—Ä—Ç,
export function animation_scale_obj(object, animations_scale, return_animation) {
    object.scale = vec2(animations_scale)
    wait(wait_enimation, () => {
        object.scale = vec2(return_animation)
    })
}

export const makeOrnateFrame = (width, height) => {
    // –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
    add([
        rect(width, height, { radius: 4 }),
        color(20, 20, 10),
        opacity(0.4),
        outline(3, rgb(0, 0, 0)),
        pos(0, 0),
        fixed(),
        z(100)
    ]);
    
    // –£–≥–ª–æ–≤—ã–µ –∑–∞–≤–∏—Ç—É—à–∫–∏ (–ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏–∫–∞)
    const corners = [
        { pos: vec2(0, 0), char: "‚ïî" },
        { pos: vec2(WIDTH - 12, 0), char: "‚ïó" },
        { pos: vec2(0,  HEIGHT / 12), char: "‚ïö" },
        { pos: vec2(WIDTH - 12, HEIGHT / 12), char: "‚ïù" }
    ];         
};


// –û—á–µ–Ω—å –∫–æ—Å—Ç—ã–ª–ª—å–Ω–∞—è —à—Ç—É–∫–∞, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–ª–∞—Ç—å,—á—Ç–æ–±—ã –¥–ª—è –∫–∞–∂–¥—ã–æ–π –ª–æ–∫–∞—Ü–∏–∏
// –ù–µ –ø–∏—Å–∞—Ç—å if , TODO –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
export function getPassiveIncome(index) {
    let passiveIncome = 0;
    let level = 0;
    level = character_passive.real_estate[index];
    if (level > 0) {
        passiveIncome += passive_income.real_estate[index].income(level);
    }
    level = character_passive.village_business[index];
    if (level > 0) {
        passiveIncome += passive_income.village_business[index].income(level);
    }
    level = character_passive.shadow_economy[index];
    if (level > 0) {
        passiveIncome += passive_income.shadow_economy[index].income(level);
    }
    return passiveIncome * character.boost.income;

}

// –ñ–µ—Å—Ç—å –∫–∞–∫–∞—è —Ç–æ—à–≥ –Ω–æ –≤—Ä–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç 
function setupDayNightSystem() {
    let currentOverlay = null;
    let activeCycle = null;
    let targetOpacity = 0;

    // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π –æ–≤–µ—Ä–ª–µ–π –æ–¥–∏–Ω —Ä–∞–∑
    function initOverlay() {
        currentOverlay = add([
            rect(width(), height()),
            color(0),
            opacity(0),
            fixed(),
            z(99),
            "day_night_overlay"
        ]);
    }


    function transitionToCycle(cycle) {
        if (!currentOverlay) return;
        
        currentOverlay.color = cycle.color;
        targetOpacity = cycle.opacity;
        activeCycle = cycle.name;
    }
    function getCurrentCycle(hour) {
        for (const cycle of Object.values(DAY_NIGHT_CYCLE)) {
            if (cycle.start > cycle.end) { // –î–ª—è –Ω–æ—á–∏ (–ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å)
                if (hour >= cycle.start || hour < cycle.end) return cycle;
            } else if (hour >= cycle.start && hour < cycle.end) {
                return cycle;
            }
        }
        return DAY_NIGHT_CYCLE.DAY; 
    }

    initOverlay();
    transitionToCycle(DAY_NIGHT_CYCLE.DAY);
    loop(0.1, () => {
        if (currentOverlay && Math.abs(currentOverlay.opacity - targetOpacity) > 0.01) {
            currentOverlay.opacity = lerp(
                currentOverlay.opacity,
                targetOpacity,
                0.1
            );
        }
    });

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    return function updateTime(hour) {
        const normalizedHour = hour % 24;
        const newCycle = getCurrentCycle(normalizedHour);
        
        if (newCycle.name !== activeCycle) {
            transitionToCycle(newCycle);
        }
    };
}


// –¢–∞–∫ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç –±—É—Å—Ç—ã
export function change_boost_character(){
    var boost = {
        luck: 0,
        click: 1,
        crete: 1,
        income: 1,
        energy_max: 1,
        energy_recovery: 1,
    }
    Object.keys(character_open_hero).forEach((key) => {
        if (character_open_hero[key].is_wear) {
            Object.keys(heroes_info[key].effect).forEach((key2) => {
                boost[key2] = heroes_info[key].effect[key2]
            })
            character.boost = boost
            console.log(character)
            return
        }
    })

};

    

export function mainScene() {



    scene("main", () => {  // ‚Üê –ù–∞—á–∞–ª–æ callback-—Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ü–µ–Ω—ã

        onLoad(() => {
            add([
                sprite("background"),
                pos(0, 0),
                fixed(),
                z(-100),
                scale(0.9)
            ]);
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ 
            // TODO —Ç—É—Ç –∂–µ –±—É–¥–µ—Ç –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∏–¥–µ–∞–ª–µ
            change_boost_character()
            var hero = add([
                pos(WIDTH / 2, HEIGHT / 2 + 20),
                sprite(`hero_${character.id_character}`),
                scale(0.4),
                area({ scale: true }),
                anchor("center"),
                `hero`,
                {
                    nooficialname: 'Hero',
                }
                ])
        });


        // –°—á–∏—Ç–∞–µ–º –ø–∞—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
        let dailyPassiveIncome = 0;
        for (let i = 0; i < 5; i ++) {
            dailyPassiveIncome += getPassiveIncome(i);
        }




        onClick("hero", (hero) => {
            play('hero_click', {volume: 0.09, speed: 1.3})
            animation_scale_obj(hero, 0.35, 0.4)
            if (character.energy == 0) {
                return;
            }
            if (Math.random() > 0.6 ){

                let x_random = rand(10, WIDTH - 10)
                let y_random = rand(100, HEIGHT * 7 / 8)


                var coin = add([
                    sprite("coin"), // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
                    pos(x_random, y_random),
                    area(),
                    scale(1),
                    move(UP, 400),
                    "coin",
                ]);

                // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
                coin.play('spin')
                coin.onUpdate(() => {
                    if (coin.pos.y < 100) destroy(coin);
                });
            }
            
            let chance = upgrades.chance_crete.value(character.chance_crete) * character.boost.crete >= Math.random()
            let click = upgrades.click_boost.value(character.click_boost) * character.boost.click
            if (click - character.energy >= 0) {
                character.money += character.energy;
                character.total_earned += character.energy;
                character.energy = 0          
            }  else if (click < character.energy) {   
                character.energy -= click; 
                click = chance ? click * 5: click
                character.money += click;
                character.total_earned += click;
                if (chance){
                    addKaboom(hero.pos)
                }
            }



        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        makeOrnateFrame( WIDTH, HEIGHT / 6.7);

        const stateText = () => {
            const money = Math.floor(Number(character.money));
            const diamonds = Number(character.diamonds);
            const days = Number(character.days);
            const hp = Number(character.hp);
            const hungry = Number(character.hungry);
            const key_bid = Number(character.key_bid);
            const dailyIncome = Math.floor(Number(dailyPassiveIncome));
            const energy = Number(character.energy);
            const time_game = Number(character.time_game);

            return `
            üí∞ ${money}        üíé ${diamonds}            üìä +${dailyIncome}/–¥–µ–Ω—å    
            ‚ù§Ô∏è ${hp}/100     üçó ${hungry}%    üîã ${energy}/${upgrades.energy_max.value(character.energy_max) * character.boost.energy_max}
              üìÖ ${days}                                   ‚è≥ ${time_game}:00
            `.replace(/\n\s+/g, '\n').trim();
        };

        const stateLabel = add([
            text(stateText(), { 
                size: 22,
                font: "sans-serif",
                styles: {
                    "üí∞": { color: rgb(255, 215, 0) },      // –ó–æ–ª–æ—Ç–æ–π
                    "üíé": { color: rgb(0, 191, 255) },      // –ì–æ–ª—É–±–æ–π
                    "‚ù§Ô∏è": { color: rgb(255, 69, 58) },      // –ö—Ä–∞—Å–Ω—ã–π
                    "üçó": { color: rgb(255, 149, 0) },      // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    "üìä": { color: rgb(175, 82, 222) },     // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                    "üîã": { color: rgb(52, 199, 89) },      // –°–∞–ª–∞—Ç–æ–≤—ã–π
                    "‚è≥": { color: rgb(88, 86, 214) }       // –ò–Ω–¥–∏–≥–æ (–¥–ª—è –≤—Ä–µ–º–µ–Ω–∏)
                },
                width: width() - 40,
                lineSpacing: 20
            }),
            pos(20, 68),
            anchor("left"),
            color(255, 255, 255),
            fixed(),
            z(101)
        ]);


        // –û—Ç—Ä–∏–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
        for (let i = 0; i < buttons_game.length; i++) {
            const btn = add([
                pos((i + 0.5) * BUTTONSIZE, HEIGHT - BUTTONSIZE * 0.5),
                sprite(buttons_game[i]),
                scale(BUTTONSIZE / 64),
                area({ scale: true }), 
                anchor("center"), // –ú–µ–Ω—è–µ–º —Å "topleft" –Ω–∞ "center"
                `button_${buttons_game[i]}` // –¢–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            ]);

            onClick(`button_${buttons_game[i]}`, () => {
                animation_scale_obj(btn, 0.9, BUTTONSIZE / 64)
                if (buttons_game[i] == 'passive') {
                    go('passive')
                } else if (buttons_game[i] == 'profit') {
                    go('profit')
                }
             });



        }

        // —Ä–µ–Ω–¥–µ—Ä –¥–Ω—è –∏ –Ω–æ—á–∏ 
        const updateDayNight = setupDayNightSystem();

        loop(0.5, () => {


            stateLabel.text = stateText();

            for (let i = 0; i < 5; i ++) {
                let obj = passive_income.investments[i]
                let obj_ch = character_passive.investments[i]
                let cost = obj_ch.current_price
                if (obj_ch.delay == 0){
                    obj_ch.delay = obj.delay
                    const baseProbability = obj.chance(character.key_bid) + character.boost.luck;
                    const randomValue = Math.random();
                    const isPositiveChange = randomValue < baseProbability;
                    const changeIntensity = 0.05 + Math.random() * 0.1;
                    if (isPositiveChange) {
                        obj_ch.current_price *= (1 + changeIntensity);
                    } else {
                        obj_ch.current_price *= (1 - changeIntensity * 0.8); 
                    }

                        }
                else {
                    obj_ch.delay -= 1;
                }
            }
        });

        let dayTimer;
        let secondTimer;

        secondTimer = loop(1, () => {
            updateDayNight(character.time_game); 
            character.time_game = (character.time_game + 1) % 24

        })
        wait(4, () => {

            dayTimer = loop(23, () => {
                character.days += 1
                character.time_game = 0
                character.hungry -= character.hungry_gap
                character.money += dailyPassiveIncome;
                character.total_earned += dailyPassiveIncome;


            if (character.hungry <= 0) {
                character.hp -= character.hp_gap;
            }

            character.energy += upgrades.energy_recovery.value(character.energy_recovery) * character.boost.energy_recovery;
            character.energy = Math.min(upgrades.energy_max.value(character.energy_max) * character.boost.energy_max, character.energy);



            if (character.days % 20 == 0) {
                const randomChange = rand(-0.3, 0.3);
                character.key_bid = Math.max(0, Math.min(1.5, character.key_bid + randomChange));
                }
                });
            });

        onSceneLeave(() => {

            dayTimer?.cancel(); // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–º–µ–Ω–∞
            secondTimer?.cancel();
        });


    });  // ‚Üê –ö–æ–Ω–µ—Ü callback-—Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ü–µ–Ω—ã
}